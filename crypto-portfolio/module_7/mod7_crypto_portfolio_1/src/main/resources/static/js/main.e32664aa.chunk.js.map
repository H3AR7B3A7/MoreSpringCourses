{"version":3,"sources":["actions/protfolioActions.tsx","components/PositionItem.tsx","components/AddTransactionForm.tsx","components/Positions.tsx","components/TransactionItem.tsx","components/Transactions.tsx","components/login/LogoutButton.tsx","components/Header.tsx","components/login/LoginForm.tsx","components/Portfolio.tsx","reducers/portfolioReducer.tsx","reducers/index.tsx","App.tsx","store/store.tsx","serviceWorker.ts","index.tsx"],"names":["getPortfolioPositionsCreator","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","response","portfolioState","gotPositionsAction","wrap","_context","prev","next","axios","get","PORTFOLIO_SERVICE_DOMAIN","sent","data","type","positions","isAuthenticated","stop","_x","apply","this","arguments","getPortfolioTransactionsCreator","transactionType","length","undefined","_ref3","_callee3","header","transactionsList","_context3","Authorization","headers","transactions","_x3","PositionItem","props","position","react","cryptoCurrency","symbol","quantity","value","AddTransactionForm","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cryptoSymbol","price","onChange","bind","assertThisInitialized","onSelectChange","handleSubmit","e","setState","defineProperty","target","name","preventDefault","transaction","addTransaction","className","onSubmit","required","React","connect","history","_ref4","_callee4","_context4","post","_x4","addPortfolioTransactionCreator","Positions","map","components_PositionItem","key","components_AddTransactionForm","TransactionItem","id","handleCheckboxChange","Transactions","event","toggleCheckbox","transactionId","selectedTransactionIds","has","delete","add","Set","loadTransactions","console","log","deleteTransactions","Array","from","_this2","index","components_TransactionItem","portfolioTransactions","transactionIds","_ref7","_callee7","_context7","_x7","deleteTransactionsCreator","LogoutButton","logout","credentials","_ref6","_callee6","_context6","logoutAction","_ref2","_callee2","_context2","_x2","_x6","Header","href","Link","to","login_LogoutButton","LoginForm","window","location","reload","Portfolio","loadPositions","authenticated","components_Header","Switch","Route","path","component","components_Positions","portfolio","portfolioInitialState","portfolioTransactionsInitialState","combineReducers","action","App","react_default","createElement","es","store","initialState","createStore","rootReducer","compose","applyMiddleware","thunk","BrowserRouter","es_Route","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e32664aa.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {GotPositionsAction, PortfolioState,AddPortfolioTransaction, GotPortfolioTransactionsAction, Transaction, DeletePortfolioTransactions, LoginAction, LogoutAction} from \"./types\";\r\nimport { ActionCreator, Dispatch } from \"redux\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\n\r\nconst PORTFOLIO_SERVICE_DOMAIN = \"http://localhost:8080/api\";\r\n\r\nexport const getPortfolioPositionsCreator: ActionCreator<\r\nThunkAction<\r\n    void,\r\n    undefined,\r\n    null,\r\n    GotPositionsAction\r\n    >\r\n> = () => {\r\n    return async (dispatch : Dispatch) => {\r\n            const response = await axios.get(PORTFOLIO_SERVICE_DOMAIN+'/portfolio');\r\n            const portfolioState : PortfolioState = response.data;\r\n            const gotPositionsAction : GotPositionsAction = {\r\n                type : \"GotPositions\",\r\n                positions: portfolioState.positions,\r\n                isAuthenticated: true\r\n            };  \r\n            dispatch(gotPositionsAction);\r\n        \r\n    };\r\n};\r\n\r\nexport const getPortfolioPositionsLogoutCreator: ActionCreator<\r\nThunkAction<\r\n    void,\r\n    undefined,\r\n    null,\r\n    GotPositionsAction\r\n    >\r\n> = () => {\r\n    return async (dispatch : Dispatch) => {\r\n            const gotPositionsAction : GotPositionsAction = {\r\n                type : \"GotPositions\",\r\n                positions: [],\r\n                isAuthenticated: false\r\n            };  \r\n            dispatch(gotPositionsAction);\r\n        \r\n    };\r\n};\r\n\r\nexport const getPortfolioTransactionsCreator: ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        GotPortfolioTransactionsAction\r\n    >\r\n> = (transactionType : string = \"\") => {\r\n    return async (dispatch : Dispatch) => {\r\n            const header = {'Authorization': 'Basic ' +\"\"};\r\n            const response = await axios.get(PORTFOLIO_SERVICE_DOMAIN+'/portfolio/transactions/'+transactionType,\r\n            {headers: header});\r\n            const transactionsList : Transaction[] = response.data;\r\n            const gotTransactionsAction : GotPortfolioTransactionsAction = {\r\n                type: 'GotTransactions',\r\n                transactions : transactionsList,\r\n                isAuthenticated : true\r\n            }\r\n            dispatch(gotTransactionsAction)\r\n        } \r\n}\r\n\r\nexport const addPortfolioTransactionCreator : ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        AddPortfolioTransaction\r\n    >\r\n    > = (transaction: AddPortfolioTransaction) => {\r\n        return async (dispatch :  ThunkDispatch<{},{},any>) => {\r\n                const response = await axios.post(PORTFOLIO_SERVICE_DOMAIN+'/portfolio/transactions', transaction);\r\n                dispatch(getPortfolioPositionsCreator());\r\n            \r\n        }\r\n    }\r\n\r\n    export const loginActionCreator : ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        LoginAction\r\n    >\r\n    > = (loginAction: LoginAction) => {\r\n        return async (dispatch :  ThunkDispatch<{},{},any>) => {\r\n                const response = await axios.post(PORTFOLIO_SERVICE_DOMAIN+'/login', loginAction);\r\n                dispatch(getPortfolioPositionsCreator());\r\n            \r\n        }\r\n    }\r\n\r\n    export const logoutActionCreator : ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        LoginAction\r\n    >\r\n    > = (logoutAction: LogoutAction) => {\r\n        return async (dispatch :  ThunkDispatch<{},{},any>) => {\r\n                const response = await axios.post(PORTFOLIO_SERVICE_DOMAIN+'/logout', logoutAction);\r\n                dispatch(getPortfolioPositionsLogoutCreator());          \r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\nexport const deleteTransactionsCreator : ActionCreator<\r\n    ThunkAction<\r\n        void,\r\n        undefined,\r\n        null,\r\n        DeletePortfolioTransactions\r\n    >\r\n> = (transactionIds : string[]) => {\r\n    return async (dispatch :  ThunkDispatch<{},{},any>) => {\r\n\r\n            const response = await axios.delete(PORTFOLIO_SERVICE_DOMAIN+'/portfolio/transactions',{data: {id: transactionIds}})\r\n            dispatch(getPortfolioTransactionsCreator());\r\n            dispatch(getPortfolioPositionsCreator());\r\n        \r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Position } from '../actions/types';\r\n\r\ninterface PositionItemProps {\r\n    position: Position\r\n}\r\n\r\nconst PositionItem: React.SFC<PositionItemProps>  = (props) => {\r\n    const position = props.position;\r\n    return <tr>\r\n        <th>{position.cryptoCurrency.symbol}</th>\r\n        <th>{position.quantity}</th>\r\n        <th>{position.value}</th>\r\n    </tr>\r\n}\r\n\r\nexport default PositionItem","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {addPortfolioTransactionCreator} from '../actions/protfolioActions';\r\nimport { AddPortfolioTransaction } from '../actions/types';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { History } from 'history';\r\n\r\ninterface AddTransactionFormProps {\r\n    addTransaction?: Function;\r\n}\r\n\r\ninterface AddTransactionsFormState {\r\n    cryptoSymbol: string,\r\n    type: string,\r\n    quantity: number,\r\n    price: number\r\n}\r\n\r\nclass AddTransactionForm extends React.Component<AddTransactionFormProps, any> {\r\n\r\n    constructor(props:AddTransactionFormProps) {\r\n        super(props);\r\n        this.state = {\r\n            cryptoSymbol: \"\",\r\n            type: \"\",\r\n            quantity: 0,\r\n            price: 0\r\n        }\r\n        this.onChange=this.onChange.bind(this);\r\n        this.onSelectChange=this.onSelectChange.bind(this);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n\r\n    onChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        this.setState({ [e.target.name]: e.target.value});\r\n    }\r\n\r\n    onSelectChange(e: React.ChangeEvent<HTMLSelectElement>) {\r\n        this.setState({ [e.target.name]: e.target.value});\r\n    }\r\n\r\n    handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        const transaction = {\r\n            cryptoSymbol: this.state.cryptoSymbol,\r\n            price: this.state.price,\r\n            quantity: this.state.quantity,\r\n            transactionType: this.state.type\r\n        };\r\n        if(this.props.addTransaction !== undefined) {\r\n            this.props.addTransaction(transaction);\r\n        }\r\n    }\r\n\r\n  public render() {\r\n    return (\r\n        <div className=\"container add_trans_div\">\r\n            <form onSubmit={this.handleSubmit}>\r\n                <fieldset>\r\n                    <label>Symbol</label>\r\n                    <select name = \"cryptoSymbol\" required={true} value={this.state.cryptoSymbol} onChange={this.onSelectChange}>\r\n                        <option value=\"\">----Select----</option>\r\n                        <option value=\"BTC\">BTC</option>\r\n                        <option value=\"LTC\">LTC</option>\r\n                    </select>\r\n                    <label>Symbol</label>\r\n                    <select name=\"type\" required={true} value = {this.state.type} onChange={this.onSelectChange}>\r\n                        <option value=\"\">----Select----</option>\r\n                        <option value=\"BUY\">BUY</option>\r\n                        <option value=\"SELL\">SELL</option>\r\n                    </select>     \r\n                    <label>Quantity</label> \r\n\t\t\t\t    <input type=\"number\" name=\"quantity\" required={true} value={this.state.quantity} onChange={this.onChange}/>\r\n                    <label>Price</label> \r\n\t\t\t\t    <input type=\"number\" name=\"price\" required={true} value={this.state.price} onChange={this.onChange}/>\r\n\t\t\t\t    <button name=\"addTransactionBtn\" type=\"submit\">Add Transaction</button>               \r\n                </fieldset>\r\n            </form>\r\n\t    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch : ThunkDispatch<{},{},any>) => ({\r\n    addTransaction: (transaction: AddPortfolioTransaction, history: History) => dispatch(addPortfolioTransactionCreator(transaction, history))\r\n  });\r\n\r\n\r\nexport default connect(null,mapDispatchToProps)(AddTransactionForm);\r\n","import * as React from \"react\";\r\nimport { Position } from \"../actions/types\";\r\nimport PositionItem from \"./PositionItem\";\r\nimport AddTransactionForm from \"./AddTransactionForm\";\r\n\r\ninterface PositionsProps {\r\n  positions: Position[];\r\n}\r\n\r\nclass Positions extends React.Component<PositionsProps> {\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <table className=\"table table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th>Symbol</th>\r\n              <th>Quantity</th>\r\n              <th>Value</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.positions.map(position => (\r\n              <PositionItem\r\n                key={position.cryptoCurrency.symbol}\r\n                position={position}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <AddTransactionForm />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Positions;\r\n","import * as React from 'react';\r\nimport { Transaction } from '../actions/types';\r\n\r\ninterface TransactionItemProps {\r\n    transaction: Transaction;\r\n    handleCheckboxChange : React.ChangeEventHandler;\r\n}\r\n\r\nconst TransactionItem: React.SFC<TransactionItemProps> = (props) => {\r\n  return <tr>\r\n  <th><input id ={props.transaction.id} name=\"selectedTransaction\" type=\"checkbox\" onChange ={props.handleCheckboxChange} value={props.transaction.id} /></th>\r\n  <th>{props.transaction.id}</th>\r\n  <th>{props.transaction.symbol}</th>\r\n  <th>{props.transaction.transactionType}</th>\r\n  <th>{props.transaction.quantity}</th>\r\n  <th>{props.transaction.price}</th>\r\n</tr>\r\n};\r\n\r\nexport default TransactionItem;","import * as React from \"react\";\r\nimport { Transaction } from \"../actions/types\";\r\nimport { ApplicationState } from \"../reducers\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { getPortfolioTransactionsCreator, deleteTransactionsCreator } from \"../actions/protfolioActions\";\r\nimport { connect } from \"react-redux\";\r\nimport TransactionItem from \"./TransactionItem\";\r\n\r\nexport interface TransactionsProps {\r\n  loadTransactions: Function;\r\n  deleteTransactions: Function;\r\n  transactions: Transaction[];\r\n}\r\n\r\ninterface TransactionFormState {\r\n  selectedTransactionIds : Set<string>\r\n}\r\n\r\nclass Transactions extends React.Component<TransactionsProps,TransactionFormState> {\r\n  \r\n  constructor(props: TransactionsProps) {\r\n    super(props);\r\n    this.state = {\r\n      selectedTransactionIds : new Set()\r\n    }\r\n    this.handleSubmit=this.handleSubmit.bind(this);\r\n    this.handleCheckboxChange=this.handleCheckboxChange.bind(this);\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.props.loadTransactions();\r\n  }\r\n\r\n  handleCheckboxChange = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n    this.toggleCheckbox(event.target.value);\r\n  }\r\n\r\n  toggleCheckbox = (transactionId : string) => {\r\n    if(this.state.selectedTransactionIds.has(transactionId)) {\r\n        this.state.selectedTransactionIds.delete(transactionId);\r\n    } else {\r\n      this.state.selectedTransactionIds.add(transactionId);\r\n    }\r\n  }\r\n\r\n  handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n    console.log(e.target)\r\n    this.props.deleteTransactions(Array.from(this.state.selectedTransactionIds));\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <form onSubmit={this.handleSubmit}>\r\n        <table className=\"table table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Transaction Id</th>\r\n              <th>Symbol</th>\r\n              <th>Type</th>\r\n              <th>Quantity</th>\r\n              <th>Price</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n              {this.props.transactions.map((transaction, index) => (\r\n                <TransactionItem key={transaction.id} handleCheckboxChange = {this.handleCheckboxChange} transaction={transaction} />\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        <button name=\"deleteTransactionBtn\" type=\"submit\">Delete Transactions</button>    \r\n        </form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n  return { transactions: state.portfolioTransactions.transactions };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({\r\n  loadTransactions: (transactionType?: string) =>\r\n    dispatch(getPortfolioTransactionsCreator(transactionType)),\r\n  deleteTransactions : (transactionIds : string[]) => \r\n    dispatch(deleteTransactionsCreator(transactionIds))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Transactions);\r\n","import * as React from 'react';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { LogoutAction } from '../../actions/types';\r\nimport { logoutActionCreator } from '../../actions/protfolioActions';\r\nimport {connect} from 'react-redux';\r\n\r\ninterface LogoutFormProps {\r\n    logout?: Function;\r\n}\r\n\r\n\r\nclass LogoutButton extends React.Component<LogoutFormProps, any> {\r\n\r\n    constructor(props:LogoutFormProps) {\r\n        super(props);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        if(this.props.logout !== undefined) {\r\n            this.props.logout();\r\n        }\r\n    }\r\n\r\n  public render() {\r\n    return (\r\n        <form onSubmit={this.handleSubmit}>\r\n   \t\t\t\t<button name=\"logoutFormBtn\" type=\"submit\">Logout</button>               \r\n        </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch : ThunkDispatch<{},{},any>) => ({\r\n    logout: (credentials: LogoutAction, history: History) => dispatch(logoutActionCreator())\r\n  });\r\n\r\nexport default connect(null,mapDispatchToProps)(LogoutButton);\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport LogoutButton from './login/LogoutButton';\r\n\r\nexport interface IAppProps {\r\n}\r\n\r\nclass Header extends React.Component<IAppProps, any> {\r\n  public render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-sm  navbar-light crypt_nav\">\r\n      <div className=\"container-fluid\" >\r\n        <div className=\"navbar-header\">\r\n          <a className=\"navbar-brand\" href=\"#\">Spring - Crypto Portfolio</a>\r\n        </div>\r\n      <ul className=\"nav navbar-nav\">\t\t\r\n        <li className=\"nav-item active\">\r\n        <Link className=\"nav-link\" to=\"/portfolio\">Home</Link>\r\n        </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/portfolio/transactions\">Transactions</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <LogoutButton/>\r\n            </li>\r\n          </ul>\r\n      </div>\r\n    </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n\r\n","import * as React from 'react';\r\n\r\ninterface LoginFormProps {\r\n    login?: Function;\r\n}\r\n\r\nclass LoginForm extends React.Component<LoginFormProps, any> {\r\n\r\n    constructor(props:LoginFormProps) {\r\n        super(props);\r\n\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        window.location.reload();\r\n    }\r\n\r\n  public render() {\r\n    return (\r\n        <div className=\"container add_trans_div\">\r\n            <form onSubmit={this.handleSubmit}>\r\n\t\t\t\t    <button name=\"loginFormBtn\" type=\"submit\">Login</button>               \r\n            </form>\r\n\t    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { getPortfolioPositionsCreator } from \"../actions/protfolioActions\";\r\nimport { Position } from \"../actions/types\";\r\nimport { ApplicationState } from \"../reducers\";\r\nimport Positions from \"./Positions\";\r\nimport Transactions from \"./Transactions\";\r\nimport Header from './Header';\r\nimport LoginForm from \"./login/LoginForm\";\r\n\r\nexport interface AppProps {\r\n  loadPositions: Function;\r\n  positions: Position[];\r\n  authenticated?: boolean;\r\n}\r\n\r\nclass Portfolio extends React.Component<AppProps> {\r\n  componentDidMount() {\r\n    this.props.loadPositions();\r\n  }\r\n\r\n  public render() {\r\n    if(!this.props.authenticated) {\r\n      return (\r\n        <div className=\"container\">\r\n      <Header/>\r\n        <Route component={LoginForm} />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n      <Header/>\r\n      <Switch>\r\n        <Route path=\"/portfolio/transactions\" component={Transactions} />\r\n        <Route path={[\"/\",\"/portfolio\"]} component={() => <Positions positions={this.props.positions} />}/>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n  return { positions: state.portfolio.positions, authenticated : state.portfolio.isAuthenticated};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({\r\n  loadPositions: () => dispatch(getPortfolioPositionsCreator())\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Portfolio);\r\n","import {PortfolioState, PortfolioActions, TransactionsState, PortfolioTransactionsAction} from \"../actions/types\";\r\nimport { Reducer } from \"redux\";\r\n\r\nconst portfolioInitialState : PortfolioState = {positions : [], isAuthenticated : false};\r\n\r\nexport const portfolioReducer : Reducer<PortfolioState, PortfolioActions> = (\r\n    state = portfolioInitialState, action \r\n    ) => {\r\n        switch(action.type) {\r\n            case \"GotPositions\" : {\r\n                return {positions: action.positions, isAuthenticated: action.isAuthenticated};\r\n            }\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n    \r\nconst portfolioTransactionsInitialState : TransactionsState = {transactions: []}\r\n\r\n\r\nexport const portfolioTransactionsReducer : Reducer<TransactionsState, PortfolioTransactionsAction> = (\r\n    state = portfolioTransactionsInitialState , action\r\n) => {\r\n    switch(action.type) {\r\n        case 'GotTransactions' : {\r\n            return {transactions: action.transactions}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport { portfolioReducer, portfolioTransactionsReducer} from \"./portfolioReducer\";\r\nimport {PortfolioState, TransactionsState} from '../actions/types'\r\n\r\nexport interface ApplicationState {\r\n    portfolio : PortfolioState;\r\n    portfolioTransactions : TransactionsState;\r\n}\r\n\r\nexport default combineReducers<ApplicationState>({\r\n    portfolio:portfolioReducer,\r\n    portfolioTransactions: portfolioTransactionsReducer\r\n});\r\n\r\n\r\n","import React, { Component} from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport Portfolio from './components/Portfolio';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport store from \"./store/store\";\nimport LoginForm from './components/login/LoginForm';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Provider store = {store({})}>\n      <Router>\n        <div className=\"App\">\n        <Route path=\"/loginz\" component={LoginForm} />\n        <Route  path=\"/portfolio\" component={Portfolio} />\n        </div>\n      </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import {createStore,applyMiddleware,compose} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers\";\r\n\r\nexport default function configureStore(initialState: any) {\r\n\r\n    return createStore(rootReducer,initialState,\r\n        compose(applyMiddleware(thunk)));\r\n\r\n};\r\n    ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}